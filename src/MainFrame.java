
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.*;
import java.io.*;
import javax.imageio.*;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import java.awt.Point;
import com.pearsoneduc.ip.gui.ImageView;
import com.pearsoneduc.ip.gui.ViewWithROI;
import com.jhlabs.image.BoxBlurFilter;
import com.jhlabs.image.GaussianFilter;
import com.jhlabs.image.LensBlurFilter;
import com.jhlabs.image.MotionBlurFilter;
import com.jhlabs.math.FFT;
import filters.LensBlurFilterInverse;
import java.util.StringTokenizer;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on Oct 24, 2009, 2:45:41 AM
 */
/**
 *
 * @author Ashraf
 */
public class MainFrame extends javax.swing.JFrame implements ActionListener, MouseListener, MouseMotionListener {

    private BufferedImage biSourceImage = null;     // input image
    private BufferedImage biResultImage = null;    // output image
    private ViewWithROI viewSourceImage;     // image/ROI display component
    private ImageView viewResultImage;     // image/ROI display component
    private MeanInfo info;         // panel to show mean grey level
    private JFileChooser fileChooser = new JFileChooser(System.getProperty("user.dir"));
    private String imagePath;
    private File file;
    LensBlurFilter l;
    FFT ftt;
    BufferedImage temp[] = new BufferedImage[20];
    int tempIndex = 0;
    private int radiusValue;

    /** Creates new form MainFrame */
    //public MainFrame() throws IOException, ImageDecoderException {
    public MainFrame() throws Exception {
        initComponents();
        biSourceImage = new BufferedImage(400, 400, BufferedImage.TYPE_4BYTE_ABGR);
        //biResultImage = biSourceImage;
        biResultImage = null;

        viewSourceImage = new ViewWithROI(biSourceImage);
        viewResultImage = new ImageView(biSourceImage);
        paneImageViews.add(viewSourceImage);
        paneImageViews.add(viewResultImage);
        //viewSourceImage.addMouseListener(this);
        //viewSourceImage.addMouseMotionListener(this);
    }

    public static BufferedImage zoomOut(BufferedImage image, int n) {
        BufferedImage enlargedImage = null;
        try {
            int w = n * image.getWidth();
            int h = n * image.getHeight();
            enlargedImage = new BufferedImage(w, h, image.getType());

            for (int y = 0; y < h; ++y) {
                for (int x = 0; x < w; ++x) {
                    enlargedImage.setRGB(x, y, image.getRGB(x / n, y / n));
                }
            }
            return enlargedImage;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return enlargedImage;
    }

    public static BufferedImage zoomIn(BufferedImage image, int n) {
        BufferedImage enlargedImage = null;
        try {
            int w = image.getWidth() / n;
            int h = image.getHeight() / n;
            enlargedImage = new BufferedImage(w, h, image.getType());

            for (int y = 0; y < h; ++y) {
                for (int x = 0; x < w; ++x) {
                    enlargedImage.setRGB(x, y, image.getRGB(x * n, y * n));
                }
            }
            return enlargedImage;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return enlargedImage;
    }

    public static void makeRegionWhite(BufferedImage image) {
        WritableRaster raster = image.getRaster();
        for (int y = 0; y < raster.getHeight(); ++y) {
            for (int x = 0; x < raster.getWidth(); ++x) {
                if (raster.getSample(x, y, 0) > 0) {
                    raster.setSample(x, y, 0, 255);
                }
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paneTabbedControls = new javax.swing.JTabbedPane();
        tabDrawing = new javax.swing.JPanel();
        rotateBlurB = new javax.swing.JButton();
        anglesList = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        rotationList = new javax.swing.JSpinner();
        jSeparator4 = new javax.swing.JSeparator();
        BoxBlurB = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        vRadius = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        hRadius = new javax.swing.JSpinner();
        jSeparator7 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        GaussianRadius = new javax.swing.JSpinner();
        GaussianBlurB = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        FourierTransformB = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        resetB = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        fourierRadius = new javax.swing.JSlider();
        paneLabels = new javax.swing.JPanel();
        labelSourceImage = new javax.swing.JLabel();
        labelResultImage = new javax.swing.JLabel();
        paneImageViews = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Image Processing");
        setResizable(false);

        paneTabbedControls.setMinimumSize(new java.awt.Dimension(49, 50));
        paneTabbedControls.setPreferredSize(new java.awt.Dimension(130, 210));

        tabDrawing.setLayout(null);

        rotateBlurB.setFont(new java.awt.Font("Tahoma", 1, 11));
        rotateBlurB.setText("Rotate Blur");
        rotateBlurB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateBlurBActionPerformed(evt);
            }
        });
        tabDrawing.add(rotateBlurB);
        rotateBlurB.setBounds(160, 20, 110, 23);

        anglesList.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.1f)));
        tabDrawing.add(anglesList);
        anglesList.setBounds(110, 40, 40, 20);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Blur Angle Degree");
        tabDrawing.add(jLabel1);
        jLabel1.setBounds(0, 40, 100, 20);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Fourier Transform  Radius");
        tabDrawing.add(jLabel3);
        jLabel3.setBounds(280, 10, 140, 20);

        rotationList.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.1f)));
        tabDrawing.add(rotationList);
        rotationList.setBounds(110, 10, 40, 20);
        tabDrawing.add(jSeparator4);
        jSeparator4.setBounds(0, 140, 280, 10);

        BoxBlurB.setFont(new java.awt.Font("Tahoma", 1, 11));
        BoxBlurB.setText("Box Blur");
        BoxBlurB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoxBlurBActionPerformed(evt);
            }
        });
        tabDrawing.add(BoxBlurB);
        BoxBlurB.setBounds(160, 90, 110, 23);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Horizental Radius");
        tabDrawing.add(jLabel5);
        jLabel5.setBounds(20, 80, 90, 20);

        vRadius.setModel(new javax.swing.SpinnerNumberModel(0, 0, 45, 1));
        tabDrawing.add(vRadius);
        vRadius.setBounds(110, 110, 40, 20);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Vertical Radius");
        tabDrawing.add(jLabel6);
        jLabel6.setBounds(11, 110, 90, 20);

        hRadius.setModel(new javax.swing.SpinnerNumberModel(0, 0, 45, 1));
        tabDrawing.add(hRadius);
        hRadius.setBounds(110, 80, 40, 20);
        tabDrawing.add(jSeparator7);
        jSeparator7.setBounds(0, 70, 280, 10);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Gaussian Radius");
        tabDrawing.add(jLabel2);
        jLabel2.setBounds(20, 150, 90, 20);

        GaussianRadius.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), Float.valueOf(100.0f), Float.valueOf(1.0f)));
        tabDrawing.add(GaussianRadius);
        GaussianRadius.setBounds(110, 150, 40, 20);

        GaussianBlurB.setFont(new java.awt.Font("Tahoma", 1, 11));
        GaussianBlurB.setText("Gaussian Blur");
        GaussianBlurB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GaussianBlurBActionPerformed(evt);
            }
        });
        tabDrawing.add(GaussianBlurB);
        GaussianBlurB.setBounds(160, 150, 110, 23);

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);
        tabDrawing.add(jSeparator5);
        jSeparator5.setBounds(280, 0, 10, 220);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Blur Rotation Degree");
        tabDrawing.add(jLabel4);
        jLabel4.setBounds(0, 10, 110, 20);

        jLabel11.setText("50");
        tabDrawing.add(jLabel11);
        jLabel11.setBounds(630, 10, 12, 20);

        FourierTransformB.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        FourierTransformB.setText("Fourier Transform Blur");
        FourierTransformB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FourierTransformBActionPerformed(evt);
            }
        });
        tabDrawing.add(FourierTransformB);
        FourierTransformB.setBounds(460, 50, 160, 23);

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("0");
        tabDrawing.add(jLabel16);
        jLabel16.setBounds(450, 10, 10, 20);

        resetB.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        resetB.setText("Reset Result Image");
        resetB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBActionPerformed(evt);
            }
        });
        tabDrawing.add(resetB);
        resetB.setBounds(460, 150, 160, 23);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setText("Deblurring");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        tabDrawing.add(jButton1);
        jButton1.setBounds(460, 80, 160, 23);

        fourierRadius.setMaximum(50);
        fourierRadius.setMinorTickSpacing(2);
        fourierRadius.setPaintLabels(true);
        fourierRadius.setPaintTicks(true);
        fourierRadius.setValue(10);
        tabDrawing.add(fourierRadius);
        fourierRadius.setBounds(460, 0, 170, 33);

        paneTabbedControls.addTab("Blur Filter", tabDrawing);

        getContentPane().add(paneTabbedControls, java.awt.BorderLayout.PAGE_END);

        paneLabels.setLayout(new java.awt.GridLayout(1, 2));

        labelSourceImage.setFont(new java.awt.Font("Tahoma", 0, 14));
        labelSourceImage.setText("Source Image");
        labelSourceImage.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        paneLabels.add(labelSourceImage);

        labelResultImage.setFont(new java.awt.Font("Tahoma", 0, 14));
        labelResultImage.setForeground(new java.awt.Color(51, 0, 102));
        labelResultImage.setText("Result Image");
        labelResultImage.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        paneLabels.add(labelResultImage);

        getContentPane().add(paneLabels, java.awt.BorderLayout.PAGE_START);

        paneImageViews.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        paneImageViews.setPreferredSize(new java.awt.Dimension(600, 500));
        paneImageViews.setLayout(new java.awt.GridLayout(1, 0));
        getContentPane().add(paneImageViews, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Open");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);
        jMenu1.add(jSeparator1);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Save result");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);
        jMenu1.add(jSeparator3);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Print source");
        jMenu1.add(jMenuItem5);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Print result");
        jMenu1.add(jMenuItem4);
        jMenu1.add(jSeparator2);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-668)/2, (screenSize.height-503)/2, 668, 503);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        fileChooser.setDialogTitle("Open image file");
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
            imagePath = fileChooser.getSelectedFile().getAbsolutePath();
            try {
                biSourceImage = ImageIO.read(file);
                biResultImage = biSourceImage;
                viewSourceImage.setImage(biSourceImage);
                viewResultImage.setImage(biResultImage);
                info = new MeanInfo(meanValue(biSourceImage));
                info.repaint();
                viewSourceImage.repaint();
                viewResultImage.repaint();
            } catch (IOException e) {
            }
        }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void rotateBlurBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateBlurBActionPerformed
        // TODO add your handling code here:
        try {
            if (biResultImage != null) {
                resetBActionPerformed(evt);
                MotionBlurFilter m = new MotionBlurFilter();
                m.setWrapEdges(true);
                m.setRotation(Float.parseFloat(anglesList.getValue().toString()));
                m.setAngle(Float.parseFloat(anglesList.getValue().toString()));
                viewResultImage.setImage(m.filter(biSourceImage, biResultImage));
                viewResultImage.repaint();
            } else {
                JOptionPane.showMessageDialog(this, "No Image detected", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_rotateBlurBActionPerformed

    private void BoxBlurBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoxBlurBActionPerformed
        // TODO add your handling code here:
        try {
            if (biResultImage != null) {
                resetBActionPerformed(evt);
                BoxBlurFilter b = new BoxBlurFilter();
                b.setHRadius(Integer.parseInt(hRadius.getValue().toString()));
                b.setVRadius(Integer.parseInt(vRadius.getValue().toString()));
                //b.setHRadius(Float.parseFloat(hRadius.getValue().toString()));
                //b.setVRadius(Float.parseFloat(vRadius.getValue().toString()));
                viewResultImage.setImage(b.filter(biSourceImage, biResultImage));
                viewResultImage.repaint();
            } else {
                JOptionPane.showMessageDialog(this, "No Image detected", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_BoxBlurBActionPerformed

    private void GaussianBlurBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GaussianBlurBActionPerformed
        // TODO add your handling code here:
        try {
            if (biResultImage != null) {
                resetBActionPerformed(evt);
                GaussianFilter g = new GaussianFilter();
                g.setRadius(Float.parseFloat(GaussianRadius.getValue().toString()));
                viewResultImage.setImage(g.filter(biSourceImage, biResultImage));
                viewResultImage.repaint();
            } else {
                JOptionPane.showMessageDialog(this, "No Image detected", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_GaussianBlurBActionPerformed

    private void FourierTransformBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FourierTransformBActionPerformed
        // TODO add your handling code here:
        try {
            if (biResultImage != null) {
                resetBActionPerformed(evt);
                l = new LensBlurFilter();
                radiusValue = fourierRadius.getValue();
                l.setRadius(radiusValue);
                l.setSides(3);
                    l.setBloom(1);
                    l.setBloomThreshold(0);

                viewResultImage.setImage(l.filter(biSourceImage, biResultImage));
                viewResultImage.repaint();
            } else {
                JOptionPane.showMessageDialog(this, "No Image detected", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_FourierTransformBActionPerformed

    private void resetBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBActionPerformed
        // TODO add your handling code here:
        try {
            info = new MeanInfo(meanValue(biSourceImage));
            info.repaint();
            biSourceImage = ImageIO.read(file);
            viewResultImage.setImage(biSourceImage);
            viewResultImage.repaint();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_resetBActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        try {
            System.out.println("imagePath:" + imagePath);
            StringTokenizer divide = new StringTokenizer(imagePath, "\\");
            String imageName = "";
            while (divide.hasMoreTokens()) {
                imageName = divide.nextToken();
            }

            divide = new StringTokenizer(imageName, ".");
            String name = "";
            String ext = "";
            name = divide.nextToken();
            ext = divide.nextToken();

            String savePath = saveFolder("");
            if (savePath != null) {
                //BufferedImage bi = demo.bimg; // retrieve image
                File outputfile = new File(savePath + "/" + name + "_Result." + ext);
                ImageIO.write(biResultImage, ext, outputfile);
                JOptionPane.showMessageDialog(null, "Image saved successfully.");
            } else {
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            if (biResultImage != null) {
                if (radiusValue > 1) {
                    l = new LensBlurFilter();
                    l.setRadius(--radiusValue);
                    l.setSides(3);
                    l.setBloom(1);
                    l.setBloomThreshold(0);
                    viewResultImage.setImage(l.filter(biSourceImage, biResultImage));
                    viewResultImage.repaint();
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Image detected", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public String saveFolder(String fromWhere) {
        String ret = null;
        int returnVal = 0;
        try {
            fileChooser.setFileSelectionMode(JFileChooser.SAVE_DIALOG);
            returnVal = fileChooser.showDialog(this, "save image"); //to show JFileChooser
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                return ret = fileChooser.getSelectedFile().getPath();
            } else if (returnVal == JFileChooser.CANCEL_OPTION) {
            }
        } catch (Exception e) {
            Toolkit.getDefaultToolkit().beep();
        }
        return ret;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    new MainFrame().setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BoxBlurB;
    private javax.swing.JButton FourierTransformB;
    private javax.swing.JButton GaussianBlurB;
    private javax.swing.JSpinner GaussianRadius;
    private javax.swing.JSpinner anglesList;
    private javax.swing.JSlider fourierRadius;
    private javax.swing.JSpinner hRadius;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JLabel labelResultImage;
    private javax.swing.JLabel labelSourceImage;
    private javax.swing.JPanel paneImageViews;
    private javax.swing.JPanel paneLabels;
    private javax.swing.JTabbedPane paneTabbedControls;
    private javax.swing.JButton resetB;
    private javax.swing.JButton rotateBlurB;
    private javax.swing.JSpinner rotationList;
    private javax.swing.JPanel tabDrawing;
    private javax.swing.JSpinner vRadius;
    // End of variables declaration//GEN-END:variables

    private double meanValue(BufferedImage img) {
        Raster raster = img.getRaster();
        double sum = 0.0;
        for (int y = 0; y < img.getHeight(); ++y) {
            for (int x = 0; x < img.getWidth(); ++x) {
                sum += raster.getSample(x, y, 0);
            }
        }
        return sum / (img.getWidth() * img.getHeight());
    }

    public double meanValue(BufferedImage img, Rectangle region) {
        return meanValue(img.getSubimage(region.x, region.y,
                region.width, region.height));
    }

    // unused, but required by MouseListener
    public void mouseMoved(MouseEvent event) {
    }

    // unused, but required by MouseMotionListener
    public void mouseClicked(MouseEvent event) {
    }

    public void mouseExited(MouseEvent event) {
    }

    public void mouseEntered(MouseEvent event) {
    }

    public void actionPerformed(ActionEvent arg0) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    // Event handling
    public void mousePressed(MouseEvent event) {
        Point pos = event.getPoint();
        viewSourceImage.setROI(pos.x, pos.y, 0, 0);
    }

    public void mouseDragged(MouseEvent event) {
        Point pos = event.getPoint();
        Rectangle region = viewSourceImage.getROI();
        if (pos.x > region.x && pos.y > region.y) {
            region.width = pos.x - region.x + 1;
            region.height = pos.y - region.y + 1;
            viewSourceImage.setROI(region);
        }
    }

    public void mouseReleased(MouseEvent event) {
        Rectangle region = viewSourceImage.getROI();
        if (region.width > 0 && region.height > 0) {
            double mean = meanValue(biSourceImage, region);
            info.display(mean);
        }
    }
}
